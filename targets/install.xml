<?xml version="1.0"?>

<!--
  @file install.xml
  Targets for installing the-build templates into a project.

  Copyright 2016, 2017, 2018 Palantir.net, Inc.
  -->

<project name="install" default="install">

    <!-- This is required to set ${composer.composer} for installing for Platform.sh -->
    <import file="the-build.xml" />

    <property name="build.dir" value="${application.startdir}" />
    <property name="build.env" value="default" />
    <basename property="projectname" file="${build.dir}" suffix="local" />
    <resolvepath file="${phing.dir.install}/../" propertyName="build.thebuild.dir" />

    <!-- Provide the <copyproperties /> task. -->
    <taskdef name="copyproperties" classname="TheBuild\CopyPropertiesTask" />

    <!-- Target: install -->
    <target name="install" description="Install the Phing build template into your project.">

        <!-- Configuration prompts.
             This creates the initial project properties file.
             -->
        <echo message="Configure the default environment..." />

        <property file="${build.thebuild.dir}/defaults.yml" prefix="default" />
        <mkdir dir="${application.startdir}/.the-build" />

        <!-- Generate a hash salt for Drupal. -->
        <php expression="hash('sha256', print_r($_SERVER, TRUE))" returnProperty="hash_salt" />
        <property name="drupal.sites.default.hash_salt" value="${hash_salt}" override="true" />

        <!-- Prompt for the Drupal URI. -->
        <propertyprompt propertyName="drupal.sites.default.uri" defaultValue="${default.drupal.sites.default.uri}" promptText="Drupal URI" promptCharacter=":" />

        <!-- Prompt for the web host. -->
        <input propertyName="build.host" validArgs="acquia,pantheon,platformsh,other" message="Hosting platform" promptChar=":" />

        <!-- Set and prompt for additional properties based on the host. We're not going
             very deep here at the moment because there are several elements of the setup
             that can vary, especially around the host-specific settings.php files. -->
        <switch value="${build.host}">
            <case value="acquia">
                <property name="drupal.root" value="docroot" />
            </case>
            <default />
        </switch>

        <!-- Load the defaults into the global namespace, which won't overwrite the properties the user just set. -->
        <property file="${build.thebuild.dir}/defaults.yml" />
        <!-- Copy defaults to fill in the sites array. -->
        <copyproperties fromPrefix="drupal.sites._defaults" toPrefix="drupal.sites.default" override="false" />


        <!-- Copy the build file template.

             This doesn't do any property substitution except for the "projectname",
             which is the name of the install directory, and the "host", set by prompt
             above.

             We can't do general property substitution here because this is a phing
             project file that uses phing variables.
             -->
        <copy file="${phing.dir.install}/../defaults/install/build.xml" tofile="${application.startdir}/build.xml" overwrite="true">
            <filterchain>
                <replacetokens>
                    <token key="projectname" value="${projectname}" />
                    <token key="host" value="${build.host}" />
                </replacetokens>
            </filterchain>
        </copy>

        <!-- Create the default properties file. -->
        <copy file="${phing.dir.install}/../defaults/install/the-build/build.yml" tofile="${application.startdir}/.the-build/build.yml" overwrite="true">
            <filterchain>
                <expandproperties />
            </filterchain>
        </copy>

        <!-- Move the drupal root, if it's not drupal.root.old -->
        <available file="${build.dir}/web" type="dir" property="drupal.root.old" value="web" />
        <available file="${build.dir}/docroot" type="dir" property="drupal.root.old" value="docroot" />

        <if>
            <not><equals arg1="${drupal.root}" arg2="${drupal.root.old}" /></not>
            <then>
                <if>
                    <and>
                        <available file="${build.dir}/${drupal.root.old}" type="dir" />
                        <not><available file="${build.dir}/${drupal.root}" type="dir" /></not>
                    </and>
                    <then>
                        <echo msg="Moving the ${drupal.root.old}/ directory to ${drupal.root}/" />
                        <exec command="mv ${drupal.root.old} ${drupal.root}" dir="${build.dir}" checkreturn="true" logoutput="true" />
                    </then>
                </if>

                <echo msg="Editing your composer.json to install Drupal in ${drupal.root}/" />
                <reflexive>
                    <fileset dir="${build.dir}" includes="composer.json" />
                    <filterchain>
                        <replaceregexp>
                            <regexp pattern='"${drupal.root.old}/(core|libraries|modules|profiles|themes)' replace='"${drupal.root}/\1' />
                            <regexp pattern='"web-root": "${drupal.root.old}/"' replace='"web-root": "${drupal.root}/"' />
                        </replaceregexp>
                    </filterchain>
                </reflexive>

                <echo msg="Updating your composer.lock hash" />
                <exec command="composer update --lock" dir="${application.startdir}" />
            </then>
        </if>

        <!-- Copy templates into place.
             These copy commands use <expandproperties /> for property substitution.
             -->
        <!-- Copy the behat template. -->
        <copy file="${phing.dir.install}/../defaults/install/behat.yml" tofile="${application.startdir}/behat.yml" overwrite="true">
            <filterchain>
                <expandproperties />
            </filterchain>
        </copy>

        <!-- Copy the CircleCI configuration -->
        <copy todir="${application.startdir}/" overwrite="true">
            <fileset dir="${phing.dir.install}/../defaults/install" includes=".circleci/" />
            <filterchain>
                <expandproperties />
            </filterchain>
        </copy>

        <!-- Copy the CircleCI properties. -->
        <copy file="${phing.dir.install}/../defaults/install/the-build/build.circleci.yml" tofile="${application.startdir}/.the-build/build.circleci.yml" overwrite="true" />

        <!-- Add host-specific files for settings.php templates, the-build properties, and hosting configuration. -->
        <switch value="${build.host}">
            <case value="acquia">
                <copy file="${phing.dir.install}/../defaults/install/drupal/settings.build-acquia.php" todir="${application.startdir}/.the-build/drupal" overwrite="true" />
                <copy file="${phing.dir.install}/../defaults/install/the-build/build.acquia.yml" todir="${application.startdir}/.the-build" overwrite="true" />
            </case>

            <case value="pantheon">
                <copy file="${build.thebuild.dir}/defaults/install/drupal/settings.build-pantheon.php" todir="${application.startdir}/.the-build/drupal" overwrite="true" />
                <copy file="${build.thebuild.dir}/defaults/install/the-build/build.pantheon.yml" todir="${application.startdir}/.the-build" overwrite="true" />
                <copy file="${build.thebuild.dir}/defaults/install/pantheon.yml" todir="${application.startdir}" overwrite="true" />
            </case>

            <case value="platformsh">
                <copy file="${build.thebuild.dir}/defaults/install/drupal/settings.build-platformsh.php" todir="${application.startdir}/.the-build/drupal" overwrite="true" />
                <copy file="${build.thebuild.dir}/defaults/install/the-build/build.platformsh.yml" todir="${application.startdir}/.the-build" overwrite="true" />
                <copy file="${build.thebuild.dir}/defaults/install/.platform.app.yaml" todir="${application.startdir}" overwrite="true" />
                <copy todir="${application.startdir}/.platform" overwrite="true">
                    <fileset dir="${build.thebuild.dir}/defaults/install/.platform" />
                </copy>
                <httpget url="https://raw.githubusercontent.com/platformsh/template-drupal8/master/.environment" dir="${build.dir}/" />
            </case>
            <default />
        </switch>

        <!-- Copy Drupal configuration templates (used by the 'build' target). -->
        <copy file="${phing.dir.install}/../defaults/install/drupal/services.build.yml" todir="${application.startdir}/.the-build/drupal" />
        <copy file="${phing.dir.install}/../defaults/install/drupal/settings.build.php" todir="${application.startdir}/.the-build/drupal" />

        <!-- Copy Drush configuration and aliases file templates. -->
        <copy file="${phing.dir.install}/../defaults/install/drush/drush.yml" tofile="${application.startdir}/drush/drush.yml" overwrite="true">
            <filterchain>
                <expandproperties />
            </filterchain>
        </copy>
        <copy file="${phing.dir.install}/../defaults/install/drush/sites/projectname.site.yml" tofile="${application.startdir}/drush/sites/${projectname}.site.yml" overwrite="true">
            <filterchain>
                <replacetokens>
                    <token key="uri" value="${drupal.sites.default.uri}" />
                </replacetokens>
            </filterchain>
        </copy>

        <!-- Configure the .gitignore for our settings.php structure. -->
        <copy file="${phing.dir.install}/../defaults/install/gitignore" tofile="${application.startdir}/.gitignore" overwrite="true">
            <filterchain>
                <expandproperties />
            </filterchain>
        </copy>

        <!-- Set up the Drupal sites directory. -->
        <phingcall target="drupal-sites-directory">
            <property name="drupal.site.dir" value="default" />
        </phingcall>

        <!-- Run the first build. -->
        <phing dir="${application.startdir}" target="build" inheritAll="false" />

        <!-- If Drupal has a database connection available, offer to install Drupal. -->
        <trycatch>
            <try>
                <!-- The 'haltonfailure' attribute seems to have the opposite behavior
                     from what is described in the Phing documentation. -->
                <phing dir="${application.startdir}" target="drupal-has-database-connection" inheritAll="false" haltonfailure="true" />

                <!-- This code will run only when a database connection is available. -->
                <input propertyName="install_now" validArgs="y,n" message="Install Drupal now " promptChar="?" />
                <if>
                    <equals arg1="${install_now}" arg2="y" />
                    <then>
                        <phing dir="${application.startdir}" target="drupal-first-install" inheritAll="false" />
                    </then>
                </if>
            </try>
            <catch>
                <!-- Drupal will be installed later, if not manually then by the 'install'
                     target in the default build.xml. -->
                <echo>Skipping Drupal installation, since the database is not available.

            From within a development environment, you can run `phing install` to install Drupal.
                </echo>
            </catch>
        </trycatch>

        <!-- Whitespace is intentional. -->
        <echo>

            Successfully installed the-build. Next, you may want to run:

              $> phing list
              $> phing install
              $> phing test</echo>
    </target>


    <target name="drupal-sites-directory" hidden="true">
        <fail unless="drupal.site.dir" />
        <fail unless="build.host" />
        <fail unless="drupal.root" />
        <fail unless="build.dir" />

        <!-- Make sure the sites directory exists. This is not necessary for the 'default' site, but is required for creating additional multisites. -->
        <mkdir dir="${build.dir}/${drupal.root}/sites/${drupal.site.dir}" />

        <!-- Use our own basic Drupal settings.php file. -->
        <chmod mode="750" file="${build.dir}/${drupal.root}/sites/default/" />
        <copy file="${build.thebuild.dir}/defaults/install_site/drupal/settings.php" tofile="${build.dir}/${drupal.root}/sites/${drupal.site.dir}/settings.php" overwrite="true">
            <filterchain>
                <expandproperties />
            </filterchain>
        </copy>

        <!-- Use the default Drupal services.yml file. -->
        <copy file="${build.dir}/${drupal.root}/sites/default/default.services.yml" tofile="${build.dir}/${drupal.root}/sites/${drupal.site.dir}/services.yml" overwrite="true">
            <filterchain>
                <striplinecomments>
                    <comment value="#" />
                </striplinecomments>
            </filterchain>
        </copy>

        <!-- Add host-specific settings.php and deployment files. -->
        <switch value="${build.host}">
            <case value="acquia">
                <copy file="${build.thebuild.dir}/defaults/install_site/drupal/settings.acquia.php" todir="${build.dir}/${drupal.root}/sites/${drupal.site.dir}" />
                <!--
                     As of July 2020, Acquia only provides MySQL 5.6. Drupal 9 requires an
                     additional driver to use this older version.
                     @see https://docs.acquia.com/acquia-cloud/create/install/drupal9/
                     -->
                <composer command="require" composer="${composer.composer}">
                    <arg line="--working-dir ${application.startdir}" />
                    <arg value="drupal/mysql56" />
                </composer>
            </case>

            <case value="pantheon">
                <httpget url="https://raw.githubusercontent.com/pantheon-systems/drops-8/default/sites/default/settings.pantheon.php" dir="${build.dir}/${drupal.root}/sites/${drupal.site.dir}" />
            </case>

            <case value="platformsh">
                <composer command="require" composer="${composer.composer}">
                    <arg line="--working-dir ${application.startdir}" />
                    <arg value="platformsh/config-reader:^2.1" />
                </composer>
                <httpget url="https://raw.githubusercontent.com/platformsh/template-drupal8/master/web/sites/default/settings.platformsh.php" dir="${build.dir}/${drupal.root}/sites/${drupal.site.dir}" />
            </case>
            <default />
        </switch>

        <echo msg="Set up the Drupal sites directory at '${drupal.root}/sites/${drupal.site.dir}/'" />
    </target>


</project>
