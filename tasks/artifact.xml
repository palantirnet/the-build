<?xml version="1.0"?>

<!--
  @file artifact.xml
  Targets for managing Drupal code artifacts.

  Copyright 2018 Palantir.net, Inc.
  -->

<project name="artifact" default="artifact-main">


    <!--
      Required configuration for building artifacts:
        artifact.git.remote

      Optional configuration:
        artifact.git.remote_branch
        artifact.directory
        artifact.prefix
        artifact.gitignore_template
        artifact.readme_template

      Optional configuration, but generally this should not need to be modified:
        artifact.git.remote_base_branch
        artifact.git.remote_name

      Run time flags:
        push

      For full documentation on these properties, see the docs/properties.md file.
      -->


    <!--
      Target: build-artifact
      -->
    <target name="artifact-main" description="Build and deploy the application.">
        <!-- This property MUST be provided. -->
        <fail unless="artifact.git.remote" message="The remote git repository must be configured in the 'artifact.git.remote' property." />

        <!-- Default property value(s). -->
        <property name="artifact.directory" value="artifacts/build" />
        <property name="artifact.prefix" value="artifact-" />
        <property name="artifact.git.remote_base_branch" value="master" />
        <property name="artifact.git.remote_name" value="origin" />
        <property name="artifact.gitignore_template" value="${phing.dir.artifact}/../conf/artifact-gitignore" />
        <property name="artifact.readme_template" value="${phing.dir.artifact}/../conf/artifact-README.md" />

        <!-- Get the current commit, branch, message, and tag so that they can be used to label the
             resulting artifact and reset the repository after the artifact is built. -->
        <exec command="git rev-parse HEAD" outputProperty="artifact.git.commit" checkreturn="true" />
        <exec command="git rev-parse --abbrev-ref HEAD" outputProperty="artifact.git.branch" checkreturn="true" />
        <exec command="git log -1 --oneline" outputProperty="artifact.git.commit_message" />
        <exec command="git describe --tags --exact-match" outputProperty="artifact.git.tag" returnProperty="artifact.git.no_tag" />

        <!-- Create a temporary branch name based on the commit for building the artifact,
             to avoid branch conflicts. -->
        <property name="artifact.git.temporary_branch" value="artifact-${artifact.git.commit}" />
        <!-- Prefix the repository tag so that we're not using the exact same tag on the
             artifact and on the repository, to avoid confusion, especially when the
             artifact is built on a branch of the development repository. -->
        <property name="artifact.git.artifact_tag" value="${artifact.prefix}${artifact.git.tag}" />
        <!-- If the remote branch isn't configured, use a remote branch based on the name
             of the current branch. This won't overwrite the property value if it is
             already set. -->
        <property name="artifact.git.remote_branch" value="${artifact.prefix}${artifact.git.branch}" />


        <phingcall target="artifact-safeToBuild" />

        <phingcall target="artifact-initializeRepository" />

        <phingcall target="artifact-setupBranch" />

        <phingcall target="artifact-updateCode" />

        <phingcall target="artifact-build" />

        <phingcall target="artifact-commit" />

        <phingcall target="artifact-optionalPush" />

        <phingcall target="artifact-resetState" />
    </target>


    <target name="artifact-safeToBuild">
        <!-- Make sure the caller is using a deployment environment. -->
        <echo>Deploy environment:   ${build.env}</echo>
        <if>
            <or>
                <equals arg1="${build.env}" arg2="vagrant" />
                <equals arg1="${build.env}" arg2="default" />
            </or>
            <then>
                <echo level="error">  * Specify the 'build.env' property for your artifact; this is often 'acquia' or 'pantheon'</echo>
                <property name="ready_to_build" value="n" />
            </then>
        </if>


        <!-- Prevent an artifact from being built when there are changes that are not
             committed to git, since those changes wouldn't be replicable in later builds.
             -->
        <exec command="git status --porcelain" outputProperty="modified_files" />
        <if>
            <not><equals arg1="${modified_files}" arg2="" /></not>
            <then>
                <echo>Repository status:    dirty</echo>
                <echo level="error">  * You have changes which must be committed before you may build an artifact.</echo>
                <property name="ready_to_build" value="n" />
            </then>
            <else>
                <echo>Repository status:    clean</echo>
            </else>
        </if>

        <!-- Check that our artifact directory either doesn't exist or is the right repo -->
        <exec command="[ -d '${artifact.directory}' ] &amp;&amp; git -C '${artifact.directory}' remote show ${artifact.git.remote_name} -n | grep '${artifact.git.remote}'" returnProperty="artifact_repo_has_remote.error" />
        <if>
            <not><available file="${artifact.directory}" type="dir" /></not>
            <then><echo>Artifact repository:  does not exist (will be created)</echo></then>
            <elseif>
                <and>
                    <available file="${artifact.directory}" type="dir" />
                    <not><available file="${artifact.directory}/.git" type="dir" /></not>
                </and>
                <then>
                    <echo>Artifact repository:  ${artifact.directory} is not a git repository</echo>
                    <echo level="error">  * Directory '${artifact.directory}' exists but is not a git repository. Please move or delete before continuing.</echo>
                    <property name="ready_to_build" value="n" />
                </then>
            </elseif>
            <elseif>
                <!-- does git remote show origin -n | grep '${artifact.git.remote}' return the right status? -->
                <equals arg1="${artifact_repo_has_remote.error}" arg2="1" />
                <then>
                    <echo>Artifact repository:  ${artifact.directory} has wrong remote configuration</echo>
                    <echo level="error">  * Directory '${artifact.directory}' exists but the '${artifact.git.remote_name}' remote is not ${artifact.git.remote}. Please move or delete before continuing.</echo>
                    <property name="ready_to_build" value="n" />
                </then>
            </elseif>
            <else>
                <echo>Artifact repository:  ${artifact.directory}</echo>
                <echo>                      ${artifact.git.remote_name}=${artifact.git.remote}</echo>
            </else>
        </if>

        <echo>Destination branch:   ${artifact.git.remote_branch}</echo>

        <if>
            <equals arg1="${ready_to_build}" arg2="n" />
            <then>
                <echo />
                <fail msg="Build state" />
            </then>
        </if>
        <echo>Ok, ready to build!</echo>
    </target>


    <target name="artifact-initializeRepository">
        <fail unless="artifact.directory" />
        <fail unless="artifact.git.remote" />

        <!-- If there is no directory there, clone the repo. -->
        <if>
            <not><available file="${artifact.directory}/.git" type="dir" /></not>
            <then>
                <echo>Cloning the repository from ${artifact.git.remote}</echo>
                <gitclone repository="${artifact.git.remote}" targetPath="${artifact.directory}" />
            </then>
        </if>

        <!-- Wipe out any local customizations. -->
        <exec dir="${artifact.directory}" command="chmod -R 750 * " checkreturn="true" logoutput="true" />
        <exec dir="${artifact.directory}" command="git checkout -- ." checkreturn="true" logoutput="true" />
        <exec dir="${artifact.directory}" command="git checkout ${artifact.git.remote_base_branch}" checkreturn="true" />
        <exec dir="${artifact.directory}" command="git clean -ffd" checkreturn="true" />
    </target>


    <target name="artifact-setupBranch">
        <exec dir="${artifact.directory}" command="git fetch ${artifact.git.remote_name} ${artifact.git.remote_branch}" returnProperty="remote_fetch.error" />
        <if>
            <not><equals arg1="${remote_fetch.error}" arg2="0" /></not>
            <then>
                <echo>Remote branch does not exist. Creating '${artifact.git.remote_branch}' on remote repository...</echo>
                <exec dir="${artifact.directory}" command="git fetch ${artifact.git.remote_name} ${artifact.git.remote_base_branch}" returnProperty="remote_fetch_base.error" />
                <if>
                    <not><equals arg1="${remote_fetch_base.error}" arg2="0" /></not>
                    <then><fail msg="Failed to create remote branch: base branch '${artifact.git.remote_base_branch}' could not be fetched." /></then>
                </if>

                <!-- The 'remote branch' should only exist on the remote, so we create, push, then delete the local copy. -->
                <exec dir="${artifact.directory}" command="git branch ${artifact.git.remote_branch} ${artifact.git.remote_name}/${artifact.git.remote_base_branch}" checkreturn="true" />
                <exec dir="${artifact.directory}" command="git push ${artifact.git.remote_name} ${artifact.git.remote_branch}:${artifact.git.remote_branch}" checkreturn="true" />
                <exec dir="${artifact.directory}" command="git branch -d ${artifact.git.remote_branch}" checkreturn="true" />
                <echo>Remote branch '${artifact.git.remote_name}/${artifact.git.remote_branch}' created.</echo>
            </then>
        </if>

        <!-- At this point, we should have the latest work from the remote destination
             branch available locally. Now create a fresh, temporary branch for our
             artifact work, to avoid naming conflicts and allow clean rebuilds. -->
        <!-- If the build failed previously, there might be an abandoned branch for this build. -->
        <exec dir="${artifact.directory}" command="git branch | grep ${artifact.git.temporary_branch} &amp;&amp; git branch -D ${artifact.git.temporary_branch}" logoutput="true" />
        <exec dir="${artifact.directory}" command="git branch ${artifact.git.temporary_branch} ${artifact.git.remote_name}/${artifact.git.remote_branch}" checkreturn="true" logoutput="true" />
        <exec dir="${artifact.directory}" command="git checkout ${artifact.git.temporary_branch}" checkreturn="true" />
        <echo>Building on temporary branch '${artifact.git.temporary_branch}'.</echo>
    </target>


    <target name="artifact-updateCode">
        <!-- Remove all the existing files so that we can install cleanly. -->
        <delete includeemptydirs="true">
            <fileset dir="${artifact.directory}" defaultexcludes="false" excludes=".git,.git/**" includes="**/*,**/.git,**/.git/**" />
        </delete>

        <!-- List all files that are checked in to git, then use the list to copy them all
             into the artifact. -->
        <tempfile property="tmpfile" destdir="${build.dir}/artifacts" />
        <exec command="git ls-files" dir="${build.dir}" output="${tmpfile}" />

        <copy todir="${artifact.directory}" preservemode="false" mode="750" overwrite="true" haltonerror="true">
            <filelist dir="${build.dir}" listfile="${tmpfile}" />
        </copy>
        <delete file="${tmpfile}" />

        <!-- Copy a template .gitignore specific to the artifact. -->
        <copy file="${artifact.gitignore_template}" tofile="${artifact.directory}/.gitignore" overwrite="true">
            <filterchain>
                <expandproperties />
            </filterchain>
        </copy>

        <!-- Copy a template README into the artifact. -->
        <copy file="${artifact.readme_template}" tofile="${artifact.directory}/README.md" overwrite="true">
            <filterchain>
                <expandproperties />
            </filterchain>
        </copy>
    </target>


    <target name="artifact-build">
        <echo>Installing composer dependencies in the artifact...</echo>
        <exec dir="${artifact.directory}" command="composer install --no-interaction --no-dev" checkreturn="true" />

        <echo>Deleting .git subdirectories added by Composer...</echo>
        <delete includeemptydirs="true">
            <fileset dir="${artifact.directory}" defaultexcludes="false" excludes=".gitignore,.git/,.git/**" includes="**/.gitignore,**/.git,**/.git/**" />
        </delete>

        <echo>Running 'phing build' in the artifact...</echo>
        <!--
            - Override the Drupal root so that it is within the artifact directory.
            - Override the "artifact mode" so that files managed with the
              <includeresource /> task are copied into the artifact instead of symlinked.
            -->
        <phing target="build" phingfile="${phing.file}" inheritAll="false" dir=".">
            <property name="drupal.root" value="${artifact.directory}/${drupal.root}" override="true" />
            <property name="build.artifact_mode" value="copy" override="true" />
        </phing>
    </target>


    <target name="artifact-commit">
        <phing target="commit" phingfile="vendor/palantirnet/the-build/tasks/lib/repositories.xml" inheritAll="false" dir=".">
            <property name="build.dir" value="${build.dir}" />
            <property name="repo.dir" value="${artifact.directory}" />
            <property name="tag_prefix" value="${artifact.prefix}" />
            <property name="message" value="Drupal artifact build of ${artifact.git.commit_message}" />
        </phing>
    </target>


    <target name="artifact-optionalPush">
        <if>
            <or>
                <equals arg1="${push}" arg2="" />
                <not><isset property="push" /></not>
            </or>
            <then>
                <input propertyName="push" message="Push artifact changes to the '${artifact.git.remote_branch}' branch?" validArgs="y,n" />
            </then>
        </if>

        <if>
            <equals arg1="${push}" arg2="y" />
            <then>
                <echo>Pushing changes.</echo>
                <exec dir="${artifact.directory}" command="git push ${artifact.git.remote_name} ${artifact.git.temporary_branch}:${artifact.git.remote_branch}" checkreturn="true" />

                <!-- If this is a build of a tag, push the new artifact tag. -->
                <if>
                    <equals arg1="${artifact.git.no_tag}" arg2="0" />
                    <then>
                        <exec dir="${artifact.directory}" command="git push ${artifact.git.remote_name} ${artifact.git.artifact_tag}" checkreturn="true" />
                    </then>
                </if>
            </then>
        </if>
    </target>


    <target name="artifact-resetState">
        <exec dir="${artifact.directory}" command="chmod -R 750 * " checkreturn="true" logoutput="true" />
        <exec dir="${artifact.directory}" command="git checkout -- ." checkreturn="true" logoutput="true" />
        <exec dir="${artifact.directory}" command="git checkout ${artifact.git.remote_base_branch}" checkreturn="true" logoutput="true" />
        <exec dir="${artifact.directory}" command="git clean -ffd" checkreturn="true" />
        <exec dir="${artifact.directory}" command="git branch -D ${artifact.git.temporary_branch}" checkreturn="true" logoutput="true" />
    </target>


</project>
