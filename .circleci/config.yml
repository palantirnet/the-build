# This CircleCI configuration is for testing the-build itself. For the configuration
# installed in projects, see defaults/install/.circleci/config.yml

version: 2.1
jobs:
  build:
    working_directory: ~/example
    docker:
      - image: cimg/php:8.1-browsers
      - image: cimg/mysql:5.7
        command: --max_allowed_packet=16M
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_DATABASE: circle_test

    environment:
      - PALANTIR_ENVIRONMENT: circleci
      - DRUPAL_ROOT: docroot

    steps:
      - run:
          name: Install packages
          command: |
            sudo apt-get update && sudo apt-get install -y libpng-dev default-mysql-client
      - run:
          name: Configure PHP
          command: |
            echo "sendmail_path=/bin/true" | sudo tee -a "/etc/php.d/circleci.ini"
      - run:
          name: Update Composer
          command: |
            sudo composer self-update

      # Run code quality checks
      - checkout
      - run:
          name: Move project repo to test directory
          command: mv ~/examples ~/project
      - run:
          name: Run code reviews
          command: |
            composer install
            vendor/bin/phpcs ../../src --standard="Drupal,DrupalPractice"
            vendor/bin/phpmd ../../src text defaults/standard/phpmd.xml "php,inc,module,theme,profile,install,test"
            vendor/bin/phpstan analyse ../../src
          working_directory: ~/project

      # Install a drupal test project.
      - run:
          name: Create artifacts directory
          command: mkdir /tmp/artifacts
      - run:
          name: Configure URL in /etc/hosts
          command: echo 127.0.0.1 example.ddev.site | sudo tee -a /etc/hosts

      # Composer package cache
      - restore_cache:
          keys:
            - composer-v1-
      # Source cache
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}
            - source-v1-

      # Create a new project using the drupal-skeleton project
      - run:
          name: Create a new Drupal project
          command: composer create-project palantirnet/drupal-skeleton example dev-develop --no-interaction
          working_directory: ~/

      # Use this copy of the-build
      - run:
          name: Replace the default version of the-build with this one
          command: composer require --dev --with-all-dependencies palantirnet/the-build:dev-${CIRCLE_BRANCH}

      # Source cache - update when branch changes
      - save_cache:
          key: source-v1-{{ .Branch }}
          paths:
            - ".git"

      # Install the-build
      - run:
          name: Install the-build in the project
          command: printf '\n\n\nn' | vendor/bin/the-build-installer

      - run:
          name: Wait for DB
          # Dockerize is preinstalled in circleci/* docker image
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 120s

      # Install Drupal (separately, so that we can see it fail separately)
      - run:
          name: Install Drupal
          command: printf 'y' | vendor/bin/phing install -Ddrupal.validate_clean_config.bypass=yes

      # Composer package cache - update when the contents of the Composer cache directory
      # change. This cache is saved after installing Drupal, as the install process uses
      # composer to add a few modules.
      - run: ls -1R ~/.cache/composer/ > /tmp/composer-cache.txt
      - save_cache:
          key: composer-v1-{{ checksum "/tmp/composer-cache.txt" }}
          paths:
              - ~/.cache/composer

      # Add a multisite
      - run:
          name: Add a multisite to the project
          command: printf 'intranet\nintranet.example.ddev.site' | vendor/bin/phing drupal-add-multisite

      - run:
          name: Run Behat tests
          command: |
              nohup php -S example.ddev.site:8000 -t $(pwd)/${DRUPAL_ROOT}/ > /tmp/artifacts/phpd.log 2>&1 &
              vendor/bin/phing test -Dbuild.env=circleci

      - store_artifacts:
          path: /tmp/artifacts
      - store_test_results:
          path: /tmp/artifacts

workflows:
  version: 2
  build:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - gh-pages
                - /.*(readme|documentation).*/
